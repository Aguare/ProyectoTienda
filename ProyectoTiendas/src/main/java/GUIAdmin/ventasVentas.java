package GUIAdmin;

import BInstancias.Cliente;
import BInstancias.Empleado;
import BInstancias.ListaProductos;
import BInstancias.Producto;
import BInstancias.Tienda;
import BManejadores.ConsultasCliente;
import BManejadores.ConsultasOtros;
import BManejadores.ConsultasProducto;
import BManejadores.ManejarVentas;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aguare
 */
public class ventasVentas extends javax.swing.JPanel {

    private Tienda tienda;
    private JFrame principal;

    //Consultas para el funcionamiento
    private ConsultasCliente cliente = new ConsultasCliente();
    private ConsultasOtros otros = new ConsultasOtros();
    private ConsultasProducto cPro = new ConsultasProducto();
    private ManejarVentas ventas = new ManejarVentas();

    //Listas para obtener la información
    private ArrayList<Cliente> listaClientes;
    private ArrayList<Producto> busquedaProductos;
    private ArrayList<Empleado> listaEmpleados;
    private ListaProductos listaProductos;

    /**
     * Creates new form ventasVentas
     */
    public ventasVentas(Tienda tienda, JFrame frame) {
        initComponents();
        this.tienda = tienda;
        this.principal = frame;
        listaEmpleados = otros.ObtenerEmpleados();
        agregarComboEmpleados();
        listaProductos = new ListaProductos();
    }

    private void agregarComboEmpleados() {
        comboEmpleados.removeAllItems();
        for (Empleado empleado : listaEmpleados) {
            comboEmpleados.addItem("" + empleado.getCodEmpleado() + ", " + empleado.getNombre());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textNIT = new javax.swing.JTextField();
        comboClientes = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        textEmpleado = new javax.swing.JTextField();
        comboEmpleados = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        textNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textDireccion = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        textProductos = new javax.swing.JTextField();
        comboProductos = new javax.swing.JComboBox<>();
        buttonAgregar = new javax.swing.JButton();
        buttonEliminar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        labelTotal = new javax.swing.JLabel();
        buttonCancelar = new javax.swing.JButton();
        buttonVenta = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setText("NIT: ");
        add(jLabel1);
        jLabel1.setBounds(30, 19, 420, 19);

        textNIT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textNITKeyTyped(evt);
            }
        });
        add(textNIT);
        textNIT.setBounds(30, 39, 290, 26);

        comboClientes.setEnabled(false);
        comboClientes.setFocusCycleRoot(true);
        comboClientes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboClientesItemStateChanged(evt);
            }
        });
        add(comboClientes);
        comboClientes.setBounds(30, 59, 290, 30);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel4.setText("EMPLEADO:");
        add(jLabel4);
        jLabel4.setBounds(500, 19, 420, 19);

        textEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textEmpleadoKeyTyped(evt);
            }
        });
        add(textEmpleado);
        textEmpleado.setBounds(500, 39, 420, 26);

        comboEmpleados.setFocusCycleRoot(true);
        comboEmpleados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboEmpleadosItemStateChanged(evt);
            }
        });
        add(comboEmpleados);
        comboEmpleados.setBounds(500, 59, 420, 30);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setText("NOMBRE:");
        add(jLabel2);
        jLabel2.setBounds(30, 109, 420, 19);
        add(textNombre);
        textNombre.setBounds(30, 129, 420, 26);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel5.setText("DIRECCIÓN:");
        add(jLabel5);
        jLabel5.setBounds(500, 109, 420, 19);
        add(textDireccion);
        textDireccion.setBounds(500, 129, 420, 26);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel7.setText("SELECCIÓN DE PRODUCTOS:");
        add(jLabel7);
        jLabel7.setBounds(30, 167, 490, 19);

        textProductos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textProductosKeyTyped(evt);
            }
        });
        add(textProductos);
        textProductos.setBounds(30, 190, 670, 26);

        comboProductos.setFocusCycleRoot(true);
        add(comboProductos);
        comboProductos.setBounds(30, 207, 670, 30);

        buttonAgregar.setText("AGREGAR");
        buttonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarActionPerformed(evt);
            }
        });
        add(buttonAgregar);
        buttonAgregar.setBounds(712, 187, 100, 31);

        buttonEliminar.setText("ELIMINAR");
        buttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEliminarActionPerformed(evt);
            }
        });
        add(buttonEliminar);
        buttonEliminar.setBounds(818, 187, 100, 31);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("TOTAL:");
        add(jLabel3);
        jLabel3.setBounds(30, 542, 740, 30);

        labelTotal.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        labelTotal.setForeground(new java.awt.Color(0, 204, 0));
        labelTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotal.setText("Q.000.00");
        add(labelTotal);
        labelTotal.setBounds(780, 542, 140, 30);

        buttonCancelar.setText("CANCELAR VENTA");
        buttonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarActionPerformed(evt);
            }
        });
        add(buttonCancelar);
        buttonCancelar.setBounds(30, 599, 180, 31);

        buttonVenta.setText("CONFIRMAR VENTA");
        buttonVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVentaActionPerformed(evt);
            }
        });
        add(buttonVenta);
        buttonVenta.setBounds(740, 599, 180, 31);

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "PRODUCTO", "PRECIO", "CANTIDAD", "SUB-TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProductos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaProductos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane6.setViewportView(tablaProductos);
        if (tablaProductos.getColumnModel().getColumnCount() > 0) {
            tablaProductos.getColumnModel().getColumn(0).setMinWidth(130);
            tablaProductos.getColumnModel().getColumn(0).setPreferredWidth(130);
            tablaProductos.getColumnModel().getColumn(1).setMinWidth(450);
            tablaProductos.getColumnModel().getColumn(1).setPreferredWidth(450);
            tablaProductos.getColumnModel().getColumn(2).setMinWidth(100);
            tablaProductos.getColumnModel().getColumn(2).setPreferredWidth(100);
            tablaProductos.getColumnModel().getColumn(3).setMinWidth(100);
            tablaProductos.getColumnModel().getColumn(3).setPreferredWidth(100);
            tablaProductos.getColumnModel().getColumn(3).setMaxWidth(100);
            tablaProductos.getColumnModel().getColumn(4).setMinWidth(103);
            tablaProductos.getColumnModel().getColumn(4).setPreferredWidth(103);
        }

        add(jScrollPane6);
        jScrollPane6.setBounds(30, 264, 890, 260);

        jButton1.setText("REGISTRAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(340, 40, 110, 31);
    }// </editor-fold>//GEN-END:initComponents

    private void comboEmpleadosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboEmpleadosItemStateChanged

    }//GEN-LAST:event_comboEmpleadosItemStateChanged

    private void textNITKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textNITKeyTyped
        listaClientes = cliente.ObtenerClientesNIT(textNIT.getText());
        comboClientes.removeAllItems();
        if (!listaClientes.isEmpty()) {
            comboClientes.setEnabled(true);
            for (Cliente cliente : listaClientes) {
                comboClientes.addItem("" + cliente.getNIT() + " , " + cliente.getNombre());
            }
            comboClientes.showPopup();
        } else {
            comboClientes.setEnabled(false);
            comboClientes.hidePopup();
        }
    }//GEN-LAST:event_textNITKeyTyped

    private void comboClientesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboClientesItemStateChanged
        if (!listaClientes.isEmpty() && comboClientes.getSelectedIndex() >= 0) {
            Cliente cl = listaClientes.get(comboClientes.getSelectedIndex());
            textNombre.setText(cl.getNombre());
            textDireccion.setText(cl.getDireccion());
        } else {
            textNombre.setText("");
            textDireccion.setText("");
        }
    }//GEN-LAST:event_comboClientesItemStateChanged

    private void textEmpleadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textEmpleadoKeyTyped
        listaEmpleados = otros.ObtenerEmpleadosCodigo(textEmpleado.getText());
        comboEmpleados.removeAllItems();
        if (!listaEmpleados.isEmpty()) {
            for (Empleado empleado : listaEmpleados) {
                comboEmpleados.addItem(empleado.getCodEmpleado() + ", " + empleado.getNombre());
            }
            comboEmpleados.showPopup();
        } else {
            comboEmpleados.hidePopup();
        }
    }//GEN-LAST:event_textEmpleadoKeyTyped

    private void textProductosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textProductosKeyTyped
        busquedaProductos = cPro.ObtenerProductosCodigoTienda(textProductos.getText(), tienda.getCodTienda());
        if (busquedaProductos.isEmpty()) {
            busquedaProductos = cPro.ObtenerProductosNombreTienda(textProductos.getText(), tienda.getCodTienda());
        }
        comboProductos.removeAllItems();
        if (!busquedaProductos.isEmpty()) {
            comboProductos.setEnabled(true);
            for (Producto pro : busquedaProductos) {
                comboProductos.addItem("" + pro.getIdProducto() + ", " + pro.getNombre() + "" + pro.getDescripcion());
            }
            comboProductos.showPopup();
        } else {
            comboProductos.setEnabled(false);
            comboProductos.hidePopup();
        }
    }//GEN-LAST:event_textProductosKeyTyped

    private void buttonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarActionPerformed
        if (busquedaProductos == null || busquedaProductos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un producto", "Producto Vacío", JOptionPane.ERROR_MESSAGE);
        } else {
            Producto pro = busquedaProductos.get(comboProductos.getSelectedIndex());
            if (pro != null) {
                if (listaProductos.yaIngresado(pro)) {
                    pro = listaProductos.devolverProducto(pro);
                    agregarProducto(pro);
                } else {
                    agregarProducto(pro);

                }
            }
        }
    }//GEN-LAST:event_buttonAgregarActionPerformed

    private void buttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEliminarActionPerformed
        if (tablaProductos.getSelectedRow() >= 0) {
            DefaultTableModel model = (DefaultTableModel) this.tablaProductos.getModel();
            int rows[] = tablaProductos.getSelectedRows();
            String cod = (String) model.getValueAt(rows[0], 0);
            System.out.println(cod);
            listaProductos.quitarProducto(cod);
            model.removeRow(rows[0]);
            labelTotal.setText("Q." + listaProductos.obtenerTotal());
        } else {
            JOptionPane.showMessageDialog(principal, "Debe seleccionar un producto", "Sin Producto", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_buttonEliminarActionPerformed

    private void buttonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarActionPerformed
        CancelarVenta v = new CancelarVenta(principal, true);
        v.setVisible(true);
        if (v.isAcepta()) {
            limpiarTodo();
        }
    }//GEN-LAST:event_buttonCancelarActionPerformed

    private void limpiarTodo() {
        textNIT.setText("");
        textNombre.setText("");
        textDireccion.setText("");
        textProductos.setText("");
        DefaultTableModel model = (DefaultTableModel) this.tablaProductos.getModel();
        for (int i = 0; i < tablaProductos.getRowCount(); i++) {
            model.removeRow(i);
        }
        listaProductos = new ListaProductos();
        busquedaProductos = new ArrayList();
        labelTotal.setText("Q.00.00");
        comboProductos.removeAllItems();
    }
    private void buttonVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVentaActionPerformed
        Cliente cliente = null;
        Empleado emple = null;
        if (comboEmpleados.getSelectedIndex() >= 0) {
            if (comboClientes.getSelectedIndex() >= 0) {
                cliente = listaClientes.get(comboClientes.getSelectedIndex());
            }
            emple = listaEmpleados.get(comboEmpleados.getSelectedIndex());
            if (cliente == null) {
                JOptionPane.showMessageDialog(principal, "Porfavor registre el Cliente para continuar");
            } else if (emple != null) {
                boolean ingreso = ventas.RealizarVentaSinPedido(cliente, emple, listaProductos, tienda);
                if (ingreso) {
                    JOptionPane.showMessageDialog(principal, "Venta Registrada", "Venta", JOptionPane.INFORMATION_MESSAGE);
                    limpiarTodo();
                }
            }
        } else {
            JOptionPane.showMessageDialog(principal, "Debe llenar todos los campos", "OBLIGATORIO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonVentaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        RegistrarCliente registrar = new RegistrarCliente();
        registrar.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void agregarProducto(Producto pro) {
        if (pro.getCantidad() > 0) {
            Cantidad cantidad = new Cantidad(principal, true, pro.getCantidad());
            cantidad.setVisible(true);
            if (cantidad.isAceptar()) {
                listaProductos.agregarProducto(pro, cantidad.getCantidad());
                agregarTabla(pro, cantidad.getCantidad());
                labelTotal.setText("Q." + listaProductos.obtenerTotal());
            }
        } else {
            JOptionPane.showMessageDialog(principal, "Ya no hay existencias");
        }
    }

    private void agregarTabla(Producto producto, int cantidad) {
        if (agregadaTabla(producto, cantidad)) {
            DefaultTableModel modelo = (DefaultTableModel) tablaProductos.getModel();
            Object[] nuevo = {producto.getIdProducto(), (producto.getNombre() + producto.getDescripcion()), producto.getPrecio(), cantidad, (producto.getPrecio() * cantidad)};
            modelo.addRow(nuevo);
        }
    }

    private boolean agregadaTabla(Producto producto, int cantidad) {
        DefaultTableModel modelo = (DefaultTableModel) tablaProductos.getModel();
        for (int i = 0; i < tablaProductos.getRowCount(); i++) {
            for (int j = 0; j < 1; j++) {
                if (j == 0) {
                    String dato = (String) modelo.getValueAt(i, j);
                    if (producto.getIdProducto().equals(dato)) {
                        int n = (int) modelo.getValueAt(i, 3);
                        n += cantidad;
                        modelo.setValueAt(n, i, 3);
                        modelo.setValueAt((producto.getPrecio() * n), i, 4);
                        return false;
                    }
                }
            }
        }
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAgregar;
    private javax.swing.JButton buttonCancelar;
    private javax.swing.JButton buttonEliminar;
    private javax.swing.JButton buttonVenta;
    private javax.swing.JComboBox<String> comboClientes;
    private javax.swing.JComboBox<String> comboEmpleados;
    private javax.swing.JComboBox<String> comboProductos;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JTextField textDireccion;
    private javax.swing.JTextField textEmpleado;
    private javax.swing.JTextField textNIT;
    private javax.swing.JTextField textNombre;
    private javax.swing.JTextField textProductos;
    // End of variables declaration//GEN-END:variables
}
